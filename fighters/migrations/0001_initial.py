# Generated by Django 5.0.1 on 2025-07-29 07:29

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Fighter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(help_text="Fighter's first name", max_length=100)),
                ('last_name', models.CharField(blank=True, default='', help_text="Fighter's last name (empty for single-name fighters like 'Shogun')", max_length=100)),
                ('display_name', models.CharField(blank=True, help_text='Preferred display name (auto-generated if empty)', max_length=255)),
                ('birth_first_name', models.CharField(blank=True, help_text='Legal first name at birth', max_length=100)),
                ('birth_last_name', models.CharField(blank=True, help_text='Legal last name at birth', max_length=100)),
                ('nickname', models.CharField(blank=True, help_text="Fighter nickname (e.g., 'Bones')", max_length=255)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('birth_place', models.CharField(blank=True, max_length=255)),
                ('nationality', models.CharField(blank=True, max_length=100)),
                ('height_cm', models.PositiveIntegerField(blank=True, help_text='Height in centimeters', null=True, validators=[django.core.validators.MinValueValidator(120), django.core.validators.MaxValueValidator(250)])),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kilograms', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(200)])),
                ('reach_cm', models.PositiveIntegerField(blank=True, help_text='Reach in centimeters', null=True, validators=[django.core.validators.MinValueValidator(120), django.core.validators.MaxValueValidator(250)])),
                ('stance', models.CharField(blank=True, choices=[('orthodox', 'Orthodox'), ('southpaw', 'Southpaw'), ('switch', 'Switch')], max_length=20)),
                ('fighting_out_of', models.CharField(blank=True, max_length=255)),
                ('team', models.CharField(blank=True, max_length=255)),
                ('years_active', models.CharField(blank=True, help_text="e.g., '2010-present' or '2005-2018'", max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('profile_image_url', models.URLField(blank=True)),
                ('wikipedia_url', models.URLField(blank=True)),
                ('social_media', models.JSONField(blank=True, default=dict)),
                ('total_fights', models.PositiveIntegerField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('draws', models.PositiveIntegerField(default=0)),
                ('no_contests', models.PositiveIntegerField(default=0)),
                ('wins_by_ko', models.PositiveIntegerField(default=0, help_text='Wins by KO')),
                ('wins_by_tko', models.PositiveIntegerField(default=0, help_text='Wins by TKO')),
                ('wins_by_submission', models.PositiveIntegerField(default=0)),
                ('wins_by_decision', models.PositiveIntegerField(default=0)),
                ('data_source', models.CharField(choices=[('manual', 'Manual Entry'), ('wikipedia', 'Wikipedia'), ('ufc_stats', 'UFC Stats'), ('ai_completion', 'AI Completion')], default='manual', max_length=50)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Data completeness/quality score (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('last_data_update', models.DateTimeField(blank=True, null=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fighter',
                'verbose_name_plural': 'Fighters',
                'db_table': 'fighters',
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['first_name', 'last_name'], name='idx_fighters_first_last'), models.Index(fields=['last_name'], name='idx_fighters_last_name'), models.Index(fields=['nationality'], name='idx_fighters_nationality'), models.Index(fields=['is_active'], name='idx_fighters_active'), django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='idx_fighters_search_vector')],
            },
        ),
        migrations.CreateModel(
            name='FighterNameVariation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name_variation', models.CharField(blank=True, max_length=100)),
                ('last_name_variation', models.CharField(blank=True, max_length=100)),
                ('full_name_variation', models.CharField(max_length=255)),
                ('variation_type', models.CharField(choices=[('alternative', 'Alternative Spelling'), ('translation', 'Translation'), ('nickname', 'Nickname Variation'), ('alias', 'Alias')], default='alternative', max_length=50)),
                ('source', models.CharField(blank=True, help_text='Where this variation was found', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fighter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='name_variations', to='fighters.fighter')),
            ],
            options={
                'verbose_name': 'Fighter Name Variation',
                'verbose_name_plural': 'Fighter Name Variations',
                'db_table': 'fighter_name_variations',
                'indexes': [models.Index(fields=['first_name_variation'], name='idx_name_var_first'), models.Index(fields=['last_name_variation'], name='idx_name_var_last'), models.Index(fields=['full_name_variation'], name='idx_name_var_full')],
                'unique_together': {('fighter', 'full_name_variation')},
            },
        ),
    ]
