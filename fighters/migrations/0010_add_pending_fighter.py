# Generated by Django 5.0.1 on 2025-07-29 20:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("events", "0003_enhanced_fight_statistics"),
        ("fighters", "0009_fighterranking_fighterstatistics_rankinghistory_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PendingFighter",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Fighter's first name as found in source",
                        max_length=100,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Fighter's last name as found in source",
                        max_length=100,
                    ),
                ),
                (
                    "full_name_raw",
                    models.CharField(
                        help_text="Full name as originally scraped", max_length=255
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True, help_text="Nickname if discovered", max_length=255
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("scraper", "Event Scraper"),
                            ("manual", "Manual Entry"),
                            ("api_import", "API Import"),
                        ],
                        default="scraper",
                        max_length=50,
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True, help_text="URL where fighter was discovered"
                    ),
                ),
                (
                    "source_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Raw data scraped about the fighter",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved - Create Fighter"),
                            ("rejected", "Rejected"),
                            ("duplicate", "Duplicate - Matched to Existing"),
                            ("created", "Fighter Created"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "confidence_level",
                    models.CharField(
                        choices=[
                            ("low", "Low - Manual Review Required"),
                            ("medium", "Medium - Likely New Fighter"),
                            ("high", "High - Definitely New Fighter"),
                        ],
                        default="medium",
                        help_text="Confidence that this is a new fighter",
                        max_length=10,
                    ),
                ),
                (
                    "potential_matches",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of potential existing fighters this might match",
                    ),
                ),
                ("nationality", models.CharField(blank=True, max_length=100)),
                ("weight_class_name", models.CharField(blank=True, max_length=100)),
                (
                    "record_text",
                    models.CharField(
                        blank=True, help_text="Fight record as text", max_length=50
                    ),
                ),
                (
                    "ai_suggested_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="AI-generated suggestions for complete fighter profile",
                    ),
                ),
                (
                    "json_template_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to JSON template for manual completion",
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "review_notes",
                    models.TextField(blank=True, help_text="Notes from reviewer"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_fighter",
                    models.OneToOneField(
                        blank=True,
                        help_text="Fighter record created from this pending fighter",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pending_source",
                        to="fighters.fighter",
                    ),
                ),
                (
                    "matched_fighter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Existing fighter this was matched to (if duplicate)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pending_duplicates",
                        to="fighters.fighter",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin user who reviewed this pending fighter",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_event",
                    models.ForeignKey(
                        blank=True,
                        help_text="Event where this fighter was discovered",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="events.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pending Fighter",
                "verbose_name_plural": "Pending Fighters",
                "db_table": "pending_fighters",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["status"], name="idx_pend_fighters_status"),
                    models.Index(fields=["source"], name="idx_pend_fighters_source"),
                    models.Index(
                        fields=["confidence_level"], name="idx_pend_fighters_conf"
                    ),
                    models.Index(
                        fields=["first_name", "last_name"],
                        name="idx_pend_fighters_name",
                    ),
                    models.Index(
                        fields=["-created_at"], name="idx_pend_fighters_created"
                    ),
                ],
            },
        ),
    ]
