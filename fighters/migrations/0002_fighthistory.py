# Generated by Django 5.0.1 on 2025-07-29 08:21

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0001_initial'),
        ('fighters', '0001_initial'),
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FightHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('result', models.CharField(choices=[('win', 'Win'), ('loss', 'Loss'), ('draw', 'Draw'), ('no_contest', 'No Contest')], max_length=20)),
                ('fighter_record_at_time', models.CharField(blank=True, help_text="Fighter's record at the time of this fight (e.g., '34-11 (1)')", max_length=50)),
                ('opponent_first_name', models.CharField(help_text="Opponent's first name", max_length=100)),
                ('opponent_last_name', models.CharField(blank=True, help_text="Opponent's last name", max_length=100)),
                ('opponent_full_name', models.CharField(help_text='Full opponent name as it appeared', max_length=255)),
                ('method', models.CharField(blank=True, choices=[('ko', 'KO'), ('tko', 'TKO'), ('tko_punches', 'TKO (punches)'), ('tko_kicks', 'TKO (kicks)'), ('tko_knees', 'TKO (knees)'), ('tko_elbows', 'TKO (elbows)'), ('tko_injury', 'TKO (injury)'), ('tko_retirement', 'TKO (retirement)'), ('tko_corner_stoppage', 'TKO (corner stoppage)'), ('tko_doctor_stoppage', 'TKO (doctor stoppage)'), ('submission', 'Submission'), ('submission_rear_naked_choke', 'Submission (rear-naked choke)'), ('submission_guillotine', 'Submission (guillotine choke)'), ('submission_triangle', 'Submission (triangle choke)'), ('submission_armbar', 'Submission (armbar)'), ('submission_kimura', 'Submission (kimura)'), ('submission_americana', 'Submission (americana)'), ('submission_ankle_lock', 'Submission (ankle lock)'), ('submission_heel_hook', 'Submission (heel hook)'), ('submission_other', 'Submission (other)'), ('decision_unanimous', 'Decision (unanimous)'), ('decision_majority', 'Decision (majority)'), ('decision_split', 'Decision (split)'), ('disqualification', 'Disqualification'), ('forfeit', 'Forfeit'), ('technical_decision', 'Technical Decision'), ('no_contest', 'No Contest'), ('other', 'Other')], max_length=50)),
                ('method_details', models.CharField(blank=True, help_text='Additional method details (e.g., specific submission type)', max_length=255)),
                ('event_name', models.CharField(help_text='Event name as it appeared', max_length=255)),
                ('event_date', models.DateField(help_text='Date of the fight')),
                ('ending_round', models.PositiveIntegerField(blank=True, help_text='Round the fight ended (1-12)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('ending_time', models.CharField(blank=True, help_text='Time in round when fight ended (MM:SS format)', max_length=10)),
                ('scheduled_rounds', models.PositiveIntegerField(default=3, help_text='Number of scheduled rounds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('location', models.CharField(blank=True, help_text='Fight location', max_length=255)),
                ('venue', models.CharField(blank=True, help_text='Venue name', max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('weight_class_name', models.CharField(blank=True, help_text='Weight class as it appeared', max_length=100)),
                ('is_title_fight', models.BooleanField(default=False)),
                ('is_interim_title', models.BooleanField(default=False)),
                ('title_belt', models.CharField(blank=True, help_text='Specific title belt name', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or context from Wikipedia')),
                ('performance_bonuses', models.JSONField(blank=True, default=list, help_text='Any performance bonuses awarded (Fight/Performance of the Night, etc.)')),
                ('organization_name', models.CharField(blank=True, help_text='Organization as it appeared', max_length=100)),
                ('data_source', models.CharField(choices=[('wikipedia', 'Wikipedia'), ('manual', 'Manual Entry'), ('ufc_stats', 'UFC Stats'), ('sherdog', 'Sherdog'), ('tapology', 'Tapology'), ('ai_completion', 'AI Completion')], default='wikipedia', max_length=50)),
                ('source_url', models.URLField(blank=True, help_text='URL where this data was found')),
                ('parsed_data', models.JSONField(blank=True, default=dict, help_text='Raw parsed data from source for debugging')),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Data completeness score (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('fight_order', models.PositiveIntegerField(help_text="Chronological order of this fight in fighter's career (1 = first fight)")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(blank=True, help_text='Link to Event record if exists', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='historical_fights', to='events.event')),
                ('fighter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fight_history', to='fighters.fighter')),
                ('opponent_fighter', models.ForeignKey(blank=True, help_text="Link to opponent's Fighter record if exists", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='opponent_history', to='fighters.fighter')),
                ('organization', models.ForeignKey(blank=True, help_text='Link to Organization if exists', null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations.organization')),
                ('weight_class', models.ForeignKey(blank=True, help_text='Link to WeightClass if exists', null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations.weightclass')),
            ],
            options={
                'verbose_name': 'Fight History Record',
                'verbose_name_plural': 'Fight History Records',
                'db_table': 'fight_history',
                'ordering': ['fighter', '-fight_order'],
                'indexes': [models.Index(fields=['fighter', '-fight_order'], name='idx_fh_fighter_order'), models.Index(fields=['fighter', 'result'], name='idx_fh_fighter_result'), models.Index(fields=['fighter', 'event_date'], name='idx_fh_fighter_date'), models.Index(fields=['opponent_first_name'], name='idx_fh_opp_first'), models.Index(fields=['opponent_last_name'], name='idx_fh_opp_last'), models.Index(fields=['opponent_full_name'], name='idx_fh_opp_full'), models.Index(fields=['opponent_fighter'], name='idx_fh_opp_fighter'), models.Index(fields=['event_date'], name='idx_fh_date'), models.Index(fields=['event_name'], name='idx_fh_event'), models.Index(fields=['organization'], name='idx_fh_org'), models.Index(fields=['method'], name='idx_fh_method'), models.Index(fields=['result', 'method'], name='idx_fh_result_method'), models.Index(fields=['is_title_fight'], name='idx_fh_title'), models.Index(fields=['data_source'], name='idx_fh_source'), models.Index(fields=['data_quality_score'], name='idx_fh_quality')],
                'unique_together': {('fighter', 'fight_order')},
            },
        ),
    ]
