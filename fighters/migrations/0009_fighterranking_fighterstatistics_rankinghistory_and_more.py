# Generated by Django 5.0.1 on 2025-07-29 13:28

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("events", "0003_enhanced_fight_statistics"),
        ("fighters", "0008_add_trigram_indexes"),
        ("organizations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="FighterRanking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "ranking_type",
                    models.CharField(
                        choices=[
                            ("divisional", "Divisional Ranking"),
                            ("p4p", "Pound-for-Pound"),
                            ("organization", "Organization-Specific"),
                        ],
                        default="divisional",
                        max_length=20,
                    ),
                ),
                ("current_rank", models.PositiveIntegerField()),
                ("previous_rank", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "ranking_score",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="Computed ranking score (higher = better)",
                        max_digits=10,
                    ),
                ),
                (
                    "record_score",
                    models.DecimalField(decimal_places=4, default=0.0, max_digits=8),
                ),
                (
                    "opponent_quality_score",
                    models.DecimalField(decimal_places=4, default=0.0, max_digits=8),
                ),
                (
                    "activity_score",
                    models.DecimalField(decimal_places=4, default=0.0, max_digits=8),
                ),
                (
                    "performance_score",
                    models.DecimalField(decimal_places=4, default=0.0, max_digits=8),
                ),
                ("calculation_date", models.DateTimeField(auto_now=True)),
                (
                    "manual_adjustment",
                    models.IntegerField(
                        default=0, help_text="Manual ranking adjustment (+/- positions)"
                    ),
                ),
                ("is_champion", models.BooleanField(default=False)),
                ("is_interim_champion", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Fighter Ranking",
                "verbose_name_plural": "Fighter Rankings",
                "db_table": "fighter_rankings",
                "ordering": ["weight_class", "organization", "current_rank"],
            },
        ),
        migrations.CreateModel(
            name="FighterStatistics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("total_fights", models.PositiveIntegerField(default=0)),
                ("wins", models.PositiveIntegerField(default=0)),
                ("losses", models.PositiveIntegerField(default=0)),
                ("draws", models.PositiveIntegerField(default=0)),
                ("no_contests", models.PositiveIntegerField(default=0)),
                ("wins_ko", models.PositiveIntegerField(default=0)),
                ("wins_tko", models.PositiveIntegerField(default=0)),
                ("wins_submission", models.PositiveIntegerField(default=0)),
                ("wins_decision", models.PositiveIntegerField(default=0)),
                ("wins_other", models.PositiveIntegerField(default=0)),
                ("losses_ko", models.PositiveIntegerField(default=0)),
                ("losses_tko", models.PositiveIntegerField(default=0)),
                ("losses_submission", models.PositiveIntegerField(default=0)),
                ("losses_decision", models.PositiveIntegerField(default=0)),
                ("losses_other", models.PositiveIntegerField(default=0)),
                (
                    "finish_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Percentage of wins by finish",
                        max_digits=5,
                    ),
                ),
                (
                    "finish_resistance",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Percentage of losses that went to decision",
                        max_digits=5,
                    ),
                ),
                (
                    "average_fight_time",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Average fight duration in minutes",
                        max_digits=6,
                    ),
                ),
                (
                    "current_streak",
                    models.IntegerField(
                        default=0, help_text="Current win/loss streak (positive = wins)"
                    ),
                ),
                ("longest_win_streak", models.PositiveIntegerField(default=0)),
                ("longest_losing_streak", models.PositiveIntegerField(default=0)),
                ("fights_last_12_months", models.PositiveIntegerField(default=0)),
                ("fights_last_24_months", models.PositiveIntegerField(default=0)),
                ("fights_last_36_months", models.PositiveIntegerField(default=0)),
                ("last_fight_date", models.DateField(blank=True, null=True)),
                (
                    "days_since_last_fight",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("title_fights", models.PositiveIntegerField(default=0)),
                ("title_wins", models.PositiveIntegerField(default=0)),
                ("main_events", models.PositiveIntegerField(default=0)),
                (
                    "top_5_wins",
                    models.PositiveIntegerField(
                        default=0, help_text="Wins against top 5 ranked opponents"
                    ),
                ),
                (
                    "top_10_wins",
                    models.PositiveIntegerField(
                        default=0, help_text="Wins against top 10 ranked opponents"
                    ),
                ),
                ("performance_bonuses", models.PositiveIntegerField(default=0)),
                ("fight_bonuses", models.PositiveIntegerField(default=0)),
                ("total_bonuses", models.PositiveIntegerField(default=0)),
                ("weight_classes_fought", models.PositiveIntegerField(default=1)),
                ("debut_date", models.DateField(blank=True, null=True)),
                (
                    "career_length_days",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "age_at_debut",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                (
                    "current_age",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                (
                    "strength_of_schedule",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="Average ranking of opponents at fight time",
                        max_digits=6,
                    ),
                ),
                (
                    "signature_wins",
                    models.PositiveIntegerField(
                        default=0, help_text="Wins against former champions/contenders"
                    ),
                ),
                (
                    "quality_losses",
                    models.PositiveIntegerField(
                        default=0, help_text="Competitive losses to elite opponents"
                    ),
                ),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                ("needs_recalculation", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Fighter Statistics",
                "verbose_name_plural": "Fighter Statistics",
                "db_table": "fighter_statistics",
            },
        ),
        migrations.CreateModel(
            name="RankingHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("rank_on_date", models.PositiveIntegerField()),
                ("ranking_score", models.DecimalField(decimal_places=4, max_digits=10)),
                ("calculation_date", models.DateField()),
                (
                    "rank_change",
                    models.IntegerField(
                        default=0, help_text="Change from previous ranking"
                    ),
                ),
                (
                    "trigger_event",
                    models.CharField(
                        blank=True,
                        help_text="Event that triggered ranking change (fight result, etc.)",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Ranking History",
                "verbose_name_plural": "Ranking History",
                "db_table": "ranking_history",
                "ordering": ["-calculation_date", "rank_on_date"],
            },
        ),
        migrations.RemoveIndex(
            model_name="fighter",
            name="idx_fighter_full_name",
        ),
        migrations.AlterUniqueTogether(
            name="fighter",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="fighthistory",
            name="data_source",
            field=models.CharField(
                choices=[
                    ("wikipedia", "Wikipedia"),
                    ("manual", "Manual Entry"),
                    ("ufc_stats", "UFC Stats"),
                    ("sherdog", "Sherdog"),
                    ("tapology", "Tapology"),
                    ("ai_completion", "AI Completion"),
                ],
                default="wikipedia",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="fighthistory",
            name="method_description",
            field=models.CharField(
                blank=True,
                help_text="Method description (e.g., 'rear naked choke', 'unanimous', 'head kick and punches')",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="fighthistory",
            name="method_details",
            field=models.CharField(
                blank=True,
                help_text="Legacy method details field (deprecated - use method_description)",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="fighterranking",
            name="fighter",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rankings",
                to="fighters.fighter",
            ),
        ),
        migrations.AddField(
            model_name="fighterranking",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                help_text="Specific organization (null for global rankings)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="organizations.organization",
            ),
        ),
        migrations.AddField(
            model_name="fighterranking",
            name="weight_class",
            field=models.ForeignKey(
                blank=True,
                help_text="Weight class for divisional rankings (null for P4P)",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="organizations.weightclass",
            ),
        ),
        migrations.AddField(
            model_name="fighterstatistics",
            name="fighter",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="statistics",
                to="fighters.fighter",
            ),
        ),
        migrations.AddField(
            model_name="fighterstatistics",
            name="primary_weight_class",
            field=models.ForeignKey(
                blank=True,
                help_text="Weight class with most fights",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="organizations.weightclass",
            ),
        ),
        migrations.AddField(
            model_name="rankinghistory",
            name="fighter_ranking",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="history",
                to="fighters.fighterranking",
            ),
        ),
        migrations.AddField(
            model_name="rankinghistory",
            name="trigger_fight",
            field=models.ForeignKey(
                blank=True,
                help_text="Fight that caused ranking change",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="events.fight",
            ),
        ),
        migrations.AddIndex(
            model_name="fighterranking",
            index=models.Index(
                fields=["weight_class", "current_rank"], name="idx_rankings_division"
            ),
        ),
        migrations.AddIndex(
            model_name="fighterranking",
            index=models.Index(
                fields=["organization", "current_rank"], name="idx_rankings_org"
            ),
        ),
        migrations.AddIndex(
            model_name="fighterranking",
            index=models.Index(
                fields=["ranking_type", "current_rank"], name="idx_rankings_type"
            ),
        ),
        migrations.AddIndex(
            model_name="fighterranking",
            index=models.Index(fields=["fighter"], name="idx_rankings_fighter"),
        ),
        migrations.AddIndex(
            model_name="fighterranking",
            index=models.Index(fields=["is_champion"], name="idx_rankings_champion"),
        ),
        migrations.AlterUniqueTogether(
            name="fighterranking",
            unique_together={
                ("fighter", "weight_class", "organization", "ranking_type"),
                ("weight_class", "organization", "current_rank", "ranking_type"),
            },
        ),
        migrations.AddIndex(
            model_name="fighterstatistics",
            index=models.Index(fields=["fighter"], name="idx_stats_fighter"),
        ),
        migrations.AddIndex(
            model_name="fighterstatistics",
            index=models.Index(fields=["finish_rate"], name="idx_stats_finish_rate"),
        ),
        migrations.AddIndex(
            model_name="fighterstatistics",
            index=models.Index(fields=["current_streak"], name="idx_stats_streak"),
        ),
        migrations.AddIndex(
            model_name="fighterstatistics",
            index=models.Index(fields=["last_fight_date"], name="idx_stats_last_fight"),
        ),
        migrations.AddIndex(
            model_name="fighterstatistics",
            index=models.Index(
                fields=["needs_recalculation"], name="idx_stats_needs_calc"
            ),
        ),
        migrations.AddIndex(
            model_name="rankinghistory",
            index=models.Index(
                fields=["fighter_ranking", "-calculation_date"],
                name="idx_rank_history_fighter_date",
            ),
        ),
        migrations.AddIndex(
            model_name="rankinghistory",
            index=models.Index(
                fields=["calculation_date"], name="idx_rank_history_date"
            ),
        ),
        migrations.AddIndex(
            model_name="rankinghistory",
            index=models.Index(fields=["rank_on_date"], name="idx_rank_history_rank"),
        ),
    ]
