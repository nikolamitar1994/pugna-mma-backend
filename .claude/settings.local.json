{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(find:*)",
      "Bash(docker logs:*)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(npm install:*)",
      "Bash(docker exec:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(git add:*)",
      "Bash(git config:*)",
      "Bash(mkdir:*)",
      "Bash(python manage.py startapp:*)",
      "Bash(python3 manage.py startapp:*)",
      "Bash(ls:*)",
      "Bash(python manage.py:*)",
      "Bash(python3 manage.py check:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(docker compose:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(apt list:*)",
      "Bash(python3:*)",
      "Bash(export PATH=$PATH:/home/nikola_mitrovic/.local/bin)",
      "Bash(pip install:*)",
      "Bash(timeout:*)",
      "Bash(touch:*)",
      "WebFetch(domain:en.wikipedia.org)",
      "Bash(python -m pip install:*)",
      "Bash(./venv/Scripts/pip.exe install html5lib)",
      "Bash(./venv/Scripts/python.exe manage.py makemigrations fighters)",
      "Bash(./venv/Scripts/python.exe manage.py migrate)",
      "Bash(./venv/Scripts/python.exe manage.py makemigrations fighters --name add_interconnected_network)",
      "Bash(cp:*)",
      "WebFetch(domain:ufcstats.com)",
      "Bash(python test:*)",
      "Bash(mv:*)",
      "Bash(source:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(venv/Scripts/python.exe manage.py makemigrations:*)",
      "Bash(docker kill:*)",
      "Bash(docker volume rm:*)",
      "Bash(true)",
      "Bash(DJANGO_LOG_LEVEL=INFO timeout 10 python3 manage.py runserver 8001)",
      "Bash(/dev/null)",
      "Bash(git push origin master)",
      "Bash(cd:*)",
      "Bash(git push:*)",
      "Bash(cd:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd development tools, documentation, and Claude agent configurations\n\n## Documentation Added:\n- ‚úÖ ADMIN_EXPLORATION_GUIDE.md - Complete admin interface guide\n- ‚úÖ JSON_IMPORT_FIELD_FEATURE.md - JSON import functionality documentation  \n- ‚úÖ PENDING_ENTITIES_IMPLEMENTATION_SUMMARY.md - Pending entities system docs\n\n## Development Tools:\n- ‚úÖ comprehensive_sample_data.py - Sample data generation utility\n- ‚úÖ Enhanced Claude agent configurations for MMA-specific tasks\n\n## Claude Agent Enhancements:\n- ü§ñ mma-decisions-scraper.md - Specialized MMA decision data scraping\n- ü§ñ ufc-wiki-scraper.md - UFC Wikipedia data extraction  \n- ü§ñ Updated tech-lead.md with enhanced capabilities\n- ‚öôÔ∏è Enhanced settings.local.json with additional permissions\n\n## Benefits:\n- üìö Comprehensive documentation for admin features\n- üõ†Ô∏è Development utilities for testing and data generation\n- ü§ñ Specialized AI agents for MMA data processing\n- üîß Enhanced development workflow configuration\n\nThese additions support the comprehensive MMA backend with proper\ndocumentation, development tools, and AI-assisted data processing\ncapabilities for fight statistics, scorecards, and editorial content.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(git commit:*)",
      "Bash(cd:*)",
      "Bash(./venv/Scripts/python.exe manage.py makemigrations fighters --name make_wikipedia_url_nullable)",
      "Bash(./venv/Scripts/python.exe manage.py scrape_ufc_wikipedia_gemini:*)",
      "Bash(DJANGO_SETTINGS_MODULE=core.settings python3 -c \"\nimport os\nos.environ.setdefault(''DJANGO_SETTINGS_MODULE'', ''core.settings'')\nimport django\ndjango.setup()\n\nfrom events.scrapers.wikipedia_ufc_scraper import UFCWikipediaScraper\nfrom events.scrapers.gemini_processor import GeminiProcessor\nimport json\n\n# Create scraper and processor\nscraper = UFCWikipediaScraper()\nprocessor = GeminiProcessor()\n\n# Test with UFC 1\nurl = ''https://en.wikipedia.org/wiki/UFC_1''\nprint(''Scraping UFC 1...'')\n\ntry:\n    # Get raw HTML\n    raw_data = scraper.scrape_ufc_event(url)\n    if raw_data.extraction_success:\n        print(''Raw extraction successful'')\n        \n        # Process with Gemini  \n        result = processor.process_ufc_event(raw_data)\n        if result:\n            print(''Gemini processing successful'')\n            \n            # Check some fight ending times\n            for i, fight in enumerate(result.fights[:3]):  # First 3 fights\n                print(f''Fight {i+1}: {fight.fighter1.first_name} vs {fight.fighter2.first_name}'')\n                print(f''  ending_time: \"\"{fight.ending_time}\"\"'')\n                print(f''  ending_round: {fight.ending_round}'')\n                print(f''  method: {fight.method}'')\n                print()\n        else:\n            print(''Gemini processing failed'')\n    else:\n        print(''Raw extraction failed'')\n        print(''Errors:'', raw_data.error_messages)\nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(DJANGO_SETTINGS_MODULE=mma_backend.settings.development python3 manage.py shell --command=\"\nfrom events.scrapers.wikipedia_ufc_scraper import UFCWikipediaScraper\nfrom events.scrapers.gemini_processor import GeminiProcessor\n\n# Create instances\nscraper = UFCWikipediaScraper()\nprocessor = GeminiProcessor()\n\n# Test with UFC 1\nurl = ''https://en.wikipedia.org/wiki/UFC_1''\nprint(''Testing UFC 1 scraping...'')\n\n# Get raw HTML\nraw_data = scraper.scrape_ufc_event(url)\nif raw_data and raw_data.extraction_success:\n    print(''‚úÖ Raw extraction successful'')\n    \n    # Process with Gemini\n    result = processor.process_ufc_event(raw_data)\n    if result:\n        print(''‚úÖ Gemini processing successful'')\n        print(f''Found {len(result.fights)} fights'')\n        \n        # Check ending times for first few fights\n        for i, fight in enumerate(result.fights[:3]):\n            print(f''Fight {i+1}: {fight.fighter1.first_name} {fight.fighter1.last_name} vs {fight.fighter2.first_name} {fight.fighter2.last_name}'')\n            print(f''  ending_time: \"\"{fight.ending_time}\"\"'')\n            print(f''  ending_round: {fight.ending_round}'')\n            print(f''  method: {fight.method}'')\n            print(f''  method_details: {fight.method_details}'')\n            print()\n    else:\n        print(''‚ùå Gemini processing failed'')\nelse:\n    print(''‚ùå Raw extraction failed'')\n\")",
      "Bash(pip3 install:*)",
      "Bash(git rm:*)"
    ],
    "deny": []
  }
}