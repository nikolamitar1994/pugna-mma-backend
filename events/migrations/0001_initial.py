# Generated by Django 5.0.1 on 2025-07-29 07:29

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fighters', '0001_initial'),
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('event_number', models.PositiveIntegerField(blank=True, null=True)),
                ('date', models.DateField()),
                ('location', models.CharField(max_length=255)),
                ('venue', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('attendance', models.PositiveIntegerField(blank=True, null=True)),
                ('gate_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('ppv_buys', models.PositiveIntegerField(blank=True, help_text='Pay-per-view purchases', null=True)),
                ('broadcast_info', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', max_length=20)),
                ('poster_url', models.URLField(blank=True)),
                ('wikipedia_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='organizations.organization')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['-date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Fight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fight_order', models.PositiveIntegerField(help_text='Order on the card (1 = main event)')),
                ('is_main_event', models.BooleanField(default=False)),
                ('is_title_fight', models.BooleanField(default=False)),
                ('is_interim_title', models.BooleanField(default=False)),
                ('scheduled_rounds', models.PositiveIntegerField(default=3)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_contest', 'No Contest')], default='scheduled', max_length=20)),
                ('method', models.CharField(blank=True, help_text='KO, TKO, Submission, Decision, etc.', max_length=50)),
                ('method_details', models.CharField(blank=True, help_text='Specific submission type, etc.', max_length=255)),
                ('ending_round', models.PositiveIntegerField(blank=True, null=True)),
                ('ending_time', models.CharField(blank=True, help_text='Time format: MM:SS', max_length=10)),
                ('referee', models.CharField(blank=True, max_length=100)),
                ('performance_bonuses', models.JSONField(blank=True, default=list, help_text='List of bonus types awarded')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fights', to='events.event')),
                ('weight_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organizations.weightclass')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_fights', to='fighters.fighter')),
            ],
            options={
                'verbose_name': 'Fight',
                'verbose_name_plural': 'Fights',
                'db_table': 'fights',
                'ordering': ['event', 'fight_order'],
            },
        ),
        migrations.CreateModel(
            name='FightParticipant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('corner', models.CharField(choices=[('red', 'Red Corner'), ('blue', 'Blue Corner')], max_length=10)),
                ('result', models.CharField(blank=True, choices=[('win', 'Win'), ('loss', 'Loss'), ('draw', 'Draw'), ('no_contest', 'No Contest')], max_length=20)),
                ('weigh_in_weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('purse', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fight', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='events.fight')),
                ('fighter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fight_participations', to='fighters.fighter')),
            ],
            options={
                'verbose_name': 'Fight Participant',
                'verbose_name_plural': 'Fight Participants',
                'db_table': 'fight_participants',
            },
        ),
        migrations.CreateModel(
            name='FightStatistics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fighter1_strikes_landed', models.PositiveIntegerField(default=0)),
                ('fighter1_strikes_attempted', models.PositiveIntegerField(default=0)),
                ('fighter2_strikes_landed', models.PositiveIntegerField(default=0)),
                ('fighter2_strikes_attempted', models.PositiveIntegerField(default=0)),
                ('fighter1_takedowns', models.PositiveIntegerField(default=0)),
                ('fighter1_takedown_attempts', models.PositiveIntegerField(default=0)),
                ('fighter2_takedowns', models.PositiveIntegerField(default=0)),
                ('fighter2_takedown_attempts', models.PositiveIntegerField(default=0)),
                ('fighter1_control_time', models.PositiveIntegerField(default=0)),
                ('fighter2_control_time', models.PositiveIntegerField(default=0)),
                ('detailed_stats', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fight', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='events.fight')),
                ('fighter1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fight_stats_1', to='fighters.fighter')),
                ('fighter2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fight_stats_2', to='fighters.fighter')),
            ],
            options={
                'verbose_name': 'Fight Statistics',
                'verbose_name_plural': 'Fight Statistics',
                'db_table': 'fight_statistics',
            },
        ),
        migrations.CreateModel(
            name='Scorecard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('judge_name', models.CharField(max_length=100)),
                ('fighter1_score', models.PositiveIntegerField()),
                ('fighter2_score', models.PositiveIntegerField()),
                ('round_scores', models.JSONField(help_text='Round-by-round scores as array')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fight', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecards', to='events.fight')),
            ],
            options={
                'verbose_name': 'Scorecard',
                'verbose_name_plural': 'Scorecards',
                'db_table': 'scorecards',
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['-date'], name='idx_events_date'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organization'], name='idx_events_organization'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='idx_events_status'),
        ),
        migrations.AddIndex(
            model_name='fight',
            index=models.Index(fields=['event'], name='idx_fights_event'),
        ),
        migrations.AddIndex(
            model_name='fight',
            index=models.Index(fields=['status'], name='idx_fights_status'),
        ),
        migrations.AddIndex(
            model_name='fight',
            index=models.Index(fields=['event', 'fight_order'], name='idx_fights_date'),
        ),
        migrations.AlterUniqueTogether(
            name='fight',
            unique_together={('event', 'fight_order')},
        ),
        migrations.AddIndex(
            model_name='fightparticipant',
            index=models.Index(fields=['fighter'], name='idx_participants_fighter'),
        ),
        migrations.AddIndex(
            model_name='fightparticipant',
            index=models.Index(fields=['fight'], name='idx_participants_fight'),
        ),
        migrations.AlterUniqueTogether(
            name='fightparticipant',
            unique_together={('fight', 'corner'), ('fight', 'fighter')},
        ),
        migrations.AddIndex(
            model_name='scorecard',
            index=models.Index(fields=['fight'], name='idx_scorecards_fight'),
        ),
    ]
